#!/usr/bin/env python

import sys
import datetime
sys.path.append('..')
import shared
import itertools
import pprint

# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
# Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
# Square	 	  	P4,n=n^2	 	  	1, 4, 9, 16, 25, ...
# Pentagonal 	  	P5,n=n(3n-1)/2   	1, 5, 12, 22, 35, ...
# Hexagonal 	  	P6,n=n(2n-1) 	  	1, 6, 15, 28, 45, ...
# Heptagonal 	  	P7,n=n(5n-3)/2   	1, 7, 18, 34, 55, ...
# Octagonal 	  	P8,n=n(3n-2) 	  	1, 8, 21, 40, 65, ...
# 
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
# 
#    1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
#    2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
#    3. This is the only set of 4-digit numbers with this property.
# 
# Find the sum of the only ordered set of six cyclic 4-digit numbers
# for which each polygonal type: triangle, square, pentagonal,
# hexagonal, heptagonal, and octagonal, is represented by a different
# number in the set.
# 

def suck(sequence):
    return [str(n) for n in itertools.takewhile(lambda x: x < 10000, itertools.dropwhile(lambda y: y < 1000, sequence))]


def chain(lists):
    if len(lists) == 1:
        for i in lists[0]:
            yield [i]
    else:
        #pprint.pprint((len(lists), lists))
        for tail in chain(lists[1:]):
            #print 'tail', tail
            pref = tail[0][:2]
            for item in lists[0]:
                if item[-2:] == pref:
                    yield [item]  + tail

def solve(n):
    n3 = shared.triangular_numbers()
    n4 = shared.square_numbers()
    n5 = shared.pentagonal_numbers()
    n6 = shared.hexagonal_numbers()
    n7 = shared.heptagonal_numbers()
    n8 = shared.octagonal_numbers()
            
    n3 = suck(n3)
    n4 = suck(n4)
    n5 = suck(n5)
    n6 = suck(n6)
    n7 = suck(n7)
    n8 = suck(n8)

    candidates = set()
    all_sets = [n3,n4,n5,n6,n7,n8][:n]
    for subset in shared.pick_without_replacement(all_sets, len(all_sets)):
        for l in chain(subset):
            #print l, l[-1][-2:], l[0][:2]
            if l[-1][-2:] == l[0][:2]:
                candidates.add(tuple(sorted(l)))
    return sum((int(i, 10) for i in candidates.pop()))


def main(args=None):
    if args == None:
        args = sys.argv[1:]

    if len(args) == 0:
        n = 6
    else:
        n = int(args[0])

    start = datetime.datetime.now()
    result = solve(n)
    end = datetime.datetime.now()
    print result
    assert 28684 == result
    
    print 'Elapsed:', end - start
    return 0


if __name__ == '__main__':
    sys.exit(main())

