#!/usr/bin/env python

import sys
import datetime
sys.path.append('..')
import shared


#     p(k) = p(k - 1) + p(k - 2) - p(k - 5) - p(k - 7) + p(k - 12) + p(k - 15) - p(k - 22)...

# where the sum is taken over all generalized pentagonal numbers of
# the form n(3n - 1)/2. The signs in the summation continue to
# alternate +, +, -, -, +, +, ... Note that generalized pentagonal
# numbers include those where n < 0 in the pentagonal number formula,
# and can be generated by successively applying the values 1, -1, 2,
# -2, 3, -3, 4, -4 ...for the value of n in the pentagonal number
# formula, generating the values 1, 2, 5, 7, 12, 15, 22, 26, 35, 40,
# 51...

def pent(n):
    return n * ( 3 * n - 1 ) / 2

def generalized_pent(n):
    if n <= 0:
        return 0
    if n % 2 == 1:
        return pent((n+1)/2)
    else:
        return pent(-n/2)

# hand-memoize, since there's only one parameter and we're counting up
partitions = [1]
def partition(n):
    # = sum, i = 1, 2, ... of (-1)^((i-1)/2) * p(n-generalized_pent(i))
    result = 0

    i = 1
    k = generalized_pent(i)
    while k <= n:
        #print 'in', k, n
        result += (-1)**((i-1)/2) * partitions[n-k]
        i += 1
        k = generalized_pent(i)
        # print 'b', i, k, n, result
    partitions.append(result)
    return result

#partition = shared.Memoize(partition)
#partition.memo[0] = 1
#print partition.memo

def solve():
    
    n = 0
    while True:
        n += 1
        p = partition(n)
        #print n, p
        if p % 1000000 == 0:
            return n
        #print n, p


def main(args=None):
    if args == None:
        args = sys.argv[1:]

    start = datetime.datetime.now()
    result = solve()
    end = datetime.datetime.now()
    print result
    assert 55374 == result
    
    print 'Elapsed:', end - start
    return 0


if __name__ == '__main__':
    sys.exit(main())

